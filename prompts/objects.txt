I have a c++20 cmake project that takes way too long to compile.  The reason is because
I have lots of include files with .hpp extension that have most of the logic.  I would
like to refactor the current project to a proposed new layout.  Can you help evaluate?

Current structure with .hpp logic in each file:

cryptor
├── CMakeLists.txt
├── include
│   ├── ansi_colors.hpp
│   ├── cli.hpp
│   ├── logging.hpp
│   ├── service.hpp
│   ├── testlib.hpp
│   └── version.hpp
└── src
    ├── cryptor.cpp
    ├── integration.cpp
    └── unit.cpp

Proposed structure to move logic from .hpp to .cpp files:

cryptor
├── CMakeLists.txt
├── include
│   ├── ansi_colors.hpp
│   ├── cli.h
│   ├── logging.h
│   ├── service.h
│   ├── testlib.h
│   └── version.h
└── src
    ├── cryptor.cpp
    ├── cli.cpp
    ├── logging.cpp
    ├── service.cpp
    ├── testlib.cpp
    ├── integration.cpp
    └── unit.cpp


And what changes if any do I need to make to my CMakeFiles.txt file? File looks like this:

cmake_minimum_required(VERSION 3.16)

# Project name and version
project(Cryptor VERSION 1.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set default build type to Release
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

# Define source and include directories
set(SRC_DIR "src")
set(INCLUDE_DIR "include")
set(BIN_DIR "build")

file(GLOB SOURCES ${SRC_DIR}/*.cpp)

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/${BIN_DIR})

# Include directories
include_directories(${INCLUDE_DIR})

# Find dependencies
find_package(OpenSSL REQUIRED)
find_package(ZLIB REQUIRED)
find_package(spdlog REQUIRED)

# Brotli (assumes it is installed using Homebrew or similar package manager)
if(APPLE AND EXISTS "/opt/homebrew")
    set(BROTLI_ROOT "/opt/homebrew")
else()
    set(BROTLI_ROOT "/usr/local")
endif()

find_path(BROTLI_INCLUDE_DIR brotli PATHS ${BROTLI_ROOT}/include)
find_library(BROTLI_COMMON_LIBRARY NAMES brotlicommon PATHS ${BROTLI_ROOT}/lib)
find_library(BROTLI_ENC_LIBRARY NAMES brotlienc PATHS ${BROTLI_ROOT}/lib)
find_library(BROTLI_DEC_LIBRARY NAMES brotlidec PATHS ${BROTLI_ROOT}/lib)

if(NOT BROTLI_INCLUDE_DIR OR NOT BROTLI_COMMON_LIBRARY OR NOT BROTLI_ENC_LIBRARY OR NOT BROTLI_DEC_LIBRARY)
    message(FATAL_ERROR "Brotli libraries not found. Make sure they are installed.")
endif()

# Libraries for dependencies
set(DEPENDENT_LIBRARIES
    OpenSSL::SSL
    OpenSSL::Crypto
    ZLIB::ZLIB
    spdlog::spdlog
    ${BROTLI_COMMON_LIBRARY}
    ${BROTLI_ENC_LIBRARY}
    ${BROTLI_DEC_LIBRARY}
    pthread
)

# Frameworks for macOS
if(APPLE)
    list(APPEND DEPENDENT_LIBRARIES
        "-framework CoreFoundation"
        "-framework Security"
    )
endif()

# Compiler definitions
add_definitions(
    -DCPPHTTPLIB_OPENSSL_SUPPORT
    -DCPPHTTPLIB_ZLIB_SUPPORT
    -DCPPHTTPLIB_BROTLI_SUPPORT
)

# Add executable targets
add_executable(cryptor ${SRC_DIR}/cryptor.cpp)
add_executable(unit ${SRC_DIR}/unit.cpp)
add_executable(integration ${SRC_DIR}/integration.cpp)

# Link libraries to executables
target_link_libraries(cryptor PRIVATE ${DEPENDENT_LIBRARIES})
target_link_libraries(unit PRIVATE ${DEPENDENT_LIBRARIES})
target_link_libraries(integration ${DEPENDENT_LIBRARIES})

# Installation rules
install(TARGETS cryptor unit integration DESTINATION ${BIN_DIR})


